// Place your key bindings in this file to override the defaultsauto[]
[
  // Remove Default Ctrl + k bindings
  {
    "key": "ctrl+k ctrl+-",
    "command": "-editor.foldAllExcept",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+=",
    "command": "-editor.unfoldAllExcept",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+a",
    "command": "-keybindings.editor.addKeybinding",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "-notebook.cell.collapseCellInput",
    "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "-notebook.cell.expandCellInput",
    "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "-notebook.cell.split",
    "when": "notebookCellEditable && notebookEditable && notebookEditorFocused"
  },
  {
    "key": "ctrl+k f",
    "command": "-workbench.action.closeFolder",
    "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
  },
  {
    "key": "ctrl+k ctrl+alt+s",
    "command": "-git.stageSelectedRanges",
    "when": "isInDiffEditor"
  },
  {
    "key": "ctrl+k ctrl+n",
    "command": "-git.unstageSelectedRanges",
    "when": "isInDiffEditor"
  },
  {
    "key": "ctrl+k ctrl+r",
    "command": "-git.revertSelectedRanges",
    "when": "isInDiffEditor"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "-editor.action.addCommentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k m",
    "command": "-workbench.action.editor.changeLanguageMode"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "-editor.debug.action.showDebugHover",
    "when": "editorTextFocus && inDebugMode"
  },
  {
    "key": "ctrl+k e",
    "command": "-workbench.files.action.focusOpenEditorsView",
    "when": "workbench.explorer.openEditorsView.active"
  },
  {
    "key": "ctrl+k c",
    "command": "-workbench.files.action.compareWithClipboard"
  },
  { "key": "ctrl+k d", "command": "-workbench.files.action.compareWithSaved" },
  {
    "key": "ctrl+k o",
    "command": "-workbench.action.files.showOpenedFileInNewWindow",
    "when": "emptyWorkspaceSupport"
  },
  { "key": "ctrl+k ctrl+o", "command": "-workbench.action.files.openFolder" },
  {
    "key": "ctrl+k s",
    "command": "-workbench.action.files.saveWithoutFormatting"
  },
  {
    "key": "ctrl+k ctrl+k",
    "command": "-editor.action.defineKeybinding",
    "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'"
  },
  {
    "key": "ctrl+k ctrl+f",
    "command": "-editor.action.formatSelection",
    "when": "editorHasDocumentSelectionFormattingProvider && editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k ctrl+d",
    "command": "-editor.action.moveSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+k ctrl+u",
    "command": "-editor.action.removeCommentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k f12",
    "command": "-editor.action.revealDefinitionAside",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+k ctrl+k",
    "command": "-editor.action.selectFromAnchorToCursor",
    "when": "editorTextFocus && selectionAnchorSet"
  },
  {
    "key": "ctrl+k ctrl+b",
    "command": "-editor.action.setSelectionAnchor",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "-editor.action.showHover",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+k ctrl+x",
    "command": "-editor.action.trimTrailingWhitespace",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k ctrl+0",
    "command": "-editor.foldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+/",
    "command": "-editor.foldAllBlockComments",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+8",
    "command": "-editor.foldAllMarkerRegions",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+1",
    "command": "-editor.foldLevel1",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+2",
    "command": "-editor.foldLevel2",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+3",
    "command": "-editor.foldLevel3",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+4",
    "command": "-editor.foldLevel4",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+5",
    "command": "-editor.foldLevel5",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+6",
    "command": "-editor.foldLevel6",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+7",
    "command": "-editor.foldLevel7",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+[",
    "command": "-editor.foldRecursively",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+l",
    "command": "-editor.toggleFold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+j",
    "command": "-editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+9",
    "command": "-editor.unfoldAllMarkerRegions",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+]",
    "command": "-editor.unfoldRecursively",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k f2",
    "command": "-togglePeekWidgetFocus",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "ctrl+k ctrl+k",
    "command": "-keybindings.editor.defineKeybinding",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "ctrl+k ctrl+e",
    "command": "-keybindings.editor.defineWhenExpression",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "-notebook.cell.collapseCellContent",
    "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
  },
  {
    "key": "ctrl+k t",
    "command": "-notebook.cell.collapseCellOutput",
    "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "-notebook.cell.expandCellContent",
    "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
  },
  {
    "key": "ctrl+k t",
    "command": "-notebook.cell.expandCellOutput",
    "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "-notebook.cell.split",
    "when": "notebookCellEditable && notebookCellEditorFocused && notebookEditable && notebookEditorFocused"
  },
  { "key": "ctrl+k ctrl+w", "command": "-workbench.action.closeAllEditors" },
  {
    "key": "ctrl+k ctrl+shift+w",
    "command": "-workbench.action.closeAllGroups"
  },
  { "key": "ctrl+k w", "command": "-workbench.action.closeEditorsInGroup" },
  {
    "key": "ctrl+k f",
    "command": "-workbench.action.closeFolder",
    "when": "emptyWorkspaceSupport"
  },
  { "key": "ctrl+k u", "command": "-workbench.action.closeUnmodifiedEditors" },
  {
    "key": "ctrl+k p",
    "command": "-workbench.action.files.copyPathOfActiveFile"
  },
  {
    "key": "ctrl+k ctrl+o",
    "command": "-workbench.action.files.openLocalFolder",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "ctrl+k r",
    "command": "-workbench.action.files.revealActiveFileInWindows"
  },
  { "key": "ctrl+k ctrl+up", "command": "-workbench.action.focusAboveGroup" },
  { "key": "ctrl+k ctrl+down", "command": "-workbench.action.focusBelowGroup" },
  { "key": "ctrl+k ctrl+left", "command": "-workbench.action.focusLeftGroup" },
  {
    "key": "ctrl+k ctrl+right",
    "command": "-workbench.action.focusRightGroup"
  },
  { "key": "ctrl+k enter", "command": "-workbench.action.keepEditor" },
  {
    "key": "ctrl+k ctrl+r",
    "command": "-workbench.action.keybindingsReference"
  },
  {
    "key": "ctrl+k down",
    "command": "-workbench.action.moveActiveEditorGroupDown"
  },
  {
    "key": "ctrl+k left",
    "command": "-workbench.action.moveActiveEditorGroupLeft"
  },
  {
    "key": "ctrl+k right",
    "command": "-workbench.action.moveActiveEditorGroupRight"
  },
  {
    "key": "ctrl+k up",
    "command": "-workbench.action.moveActiveEditorGroupUp"
  },
  {
    "key": "ctrl+k ctrl+q",
    "command": "-workbench.action.navigateToLastEditLocation"
  },
  {
    "key": "ctrl+k ctrl+pagedown",
    "command": "-workbench.action.nextEditorInGroup"
  },
  {
    "key": "ctrl+k ctrl+s",
    "command": "-workbench.action.openGlobalKeybindings"
  },
  {
    "key": "ctrl+k ctrl+h",
    "command": "-workbench.action.output.toggleOutput"
  },
  {
    "key": "ctrl+k shift+enter",
    "command": "-workbench.action.pinEditor",
    "when": "!activeEditorIsPinned"
  },
  {
    "key": "ctrl+k ctrl+pageup",
    "command": "-workbench.action.previousEditorInGroup"
  },
  { "key": "ctrl+k ctrl+t", "command": "-workbench.action.selectTheme" },
  { "key": "ctrl+k ctrl+p", "command": "-workbench.action.showAllEditors" },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorOrthogonal"
  },
  { "key": "ctrl+k z", "command": "-workbench.action.toggleZenMode" },
  {
    "key": "ctrl+k shift+enter",
    "command": "-workbench.action.unpinEditor",
    "when": "activeEditorIsPinned"
  },
  {
    "key": "ctrl+k ctrl+m",
    "command": "-workbench.extensions.action.showRecommendedKeymapExtensions"
  },
  {
    "key": "ctrl+k down",
    "command": "-views.moveViewDown",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k left",
    "command": "-views.moveViewLeft",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k right",
    "command": "-views.moveViewRight",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k up",
    "command": "-views.moveViewUp",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k v",
    "command": "-markdown.showPreviewToSide",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  // Remove default ctrl + ; keybindings
  {
    "key": "ctrl+; c",
    "command": "-jupyter.changeCellToCode",
    "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
  },
  {
    "key": "ctrl+; m",
    "command": "-jupyter.changeCellToMarkdown",
    "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
  },
  {
    "key": "ctrl+; x",
    "command": "-jupyter.deleteCells",
    "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
  },
  {
    "key": "ctrl+; a",
    "command": "-jupyter.insertCellAbove",
    "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
  },
  {
    "key": "ctrl+; b",
    "command": "-jupyter.insertCellBelow",
    "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
  },
  {
    "key": "ctrl+; s",
    "command": "-jupyter.insertCellBelowPosition",
    "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !notebookEditorFocused"
  },
  {
    "key": "ctrl+; d",
    "command": "-jupyter.moveCellsDown",
    "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
  },
  {
    "key": "ctrl+; u",
    "command": "-jupyter.moveCellsUp",
    "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
  },
  { "key": "ctrl+; ctrl+a", "command": "-testing.debugAll" },
  { "key": "ctrl+; ctrl+e", "command": "-testing.debugFailTests" },
  { "key": "ctrl+; ctrl+l", "command": "-testing.debugLastRun" },
  {
    "key": "ctrl+; ctrl+c",
    "command": "-testing.debugAtCursor",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+; ctrl+f",
    "command": "-testing.debugCurrentFile",
    "when": "editorTextFocus"
  },
  { "key": "ctrl+; m", "command": "-testing.openOutputPeek" },
  { "key": "ctrl+; e", "command": "-testing.reRunFailTests" },
  { "key": "ctrl+; l", "command": "-testing.reRunLastRun" },
  { "key": "ctrl+; a", "command": "-testing.runAll" },
  {
    "key": "ctrl+; c",
    "command": "-testing.runAtCursor",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+; f",
    "command": "-testing.runCurrentFile",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+; ctrl+o",
    "command": "-testing.showMostRecentOutput",
    "when": "testing.hasAnyResults"
  },
  {
    "key": "ctrl+; ctrl+x",
    "command": "-testing.cancelRun"
  },
  // -------------------------------------------------------------------------
  // quickOpenのファイルをナビゲーションする
  {
    // C-nで新しいファイルを開かない
    "key": "ctrl+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+shift+p",
    "command": "-workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  // Editor
  // Move Focus Editor Group
  { "key": "ctrl+w h", "command": "workbench.action.focusLeftGroup" },
  { "key": "ctrl+w l", "command": "workbench.action.focusRightGroup" },
  // Reopen editor
  {
    "key": "ctrl+w alt+x",
    "command": "workbench.action.reopenClosedEditor"
  },
  {
    "key": "ctrl+shift+t",
    "command": "-workbench.action.reopenClosedEditor"
  },
  // toggle ZenMode
  {
    "key": "ctrl+space z",
    "command": "workbench.action.toggleZenMode",
    "when": "editorFocus"
  },
  // -------------------------------------------------------------------------
  // Expand Emmet with C-e
  { "key": "ctrl+e", "command": "-workbench.action.quickOpen" },
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+e",
    "command": "editor.emmet.action.expandAbbreviation",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "key": "tab",
    "command": "-editor.emmet.action.expandAbbreviation",
    "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  // -------------------------------------------------------------------------
  // Tab Move
  {
    "key": "ctrl+h",
    "command": "workbench.action.previousEditorInGroup",
    "when": "activeEditor!=''"
    // "when": "editorFocus || inKeybindings || inSettingsEditor || activeEditor=='workbench.editor.extension' || activeEditor=='terminalEditor'"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.nextEditor",
    "when": "activeEditor!=''"
    // "when": "editorFocus || inKeybindings || inSettingsEditor || activeEditor=='workbench.editor.extension' || activeEditor=='terminalEditor'"
  },
  {
    "key": "ctrl+alt+h",
    "command": "workbench.action.moveEditorLeftInGroup",
    "when": "activeEditor!=''"
    // "when": "editorFocus || inKeybindings || inSettingsEditor || activeEditor=='workbench.editor.extension'"
  },
  {
    "key": "ctrl+w alt+h",
    "command": "workbench.action.moveEditorLeftInGroup",
    "when": "activeEditor=='terminalEditor'"
  },
  {
    "key": "ctrl+shift+pageup",
    "command": "-workbench.action.moveEditorLeftInGroup"
  },
  {
    "key": "ctrl+alt+l",
    "command": "workbench.action.moveEditorRightInGroup",
    "when": "activeEditor!=''"
    // "when": "editorFocus || inKeybindings || inSettingsEditor || activeEditor=='workbench.editor.extension' || terminalFocus"
  },
  {
    "key": "ctrl+shift+pagedown",
    "command": "-workbench.action.moveEditorRightInGroup"
  },
  // -------------------------------------------------------------------------
  // Execute showCommands
  { "key": "ctrl+space shift+;", "command": "workbench.action.showCommands" },
  { "key": "ctrl+shift+p", "command": "-workbench.action.showCommands" },
  // -------------------------------------------------------------------------
  // quickOpen
  { "key": "ctrl+space f", "command": "workbench.action.quickOpen" },
  { "key": "ctrl+p", "command": "-workbench.action.quickOpen" },
  {
    "key": "ctrl+p",
    "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  // -------------------------------------------------------------------------
  // Clip ring
  {
    "key": "ctrl+p",
    "command": "clipring.pasteRingItem",
    "when": "editorFocus && vim.mode == 'Normal'"
  },
  // -------------------------------------------------------------------------
  // snippet tab stop
  {
    "key": "ctrl+l",
    "command": "jumpToNextSnippetPlaceholder",
    "when": "editorTextFocus && hasNextTabstop && inSnippetMode"
  },
  {
    "key": "tab",
    "command": "-jumpToNextSnippetPlaceholder",
    "when": "editorTextFocus && hasNextTabstop && inSnippetMode"
  },
  {
    "key": "ctrl+h",
    "command": "jumpToPrevSnippetPlaceholder",
    "when": "editorTextFocus && hasPrevTabstop && inSnippetMode"
  },
  {
    "key": "shift+tab",
    "command": "-jumpToPrevSnippetPlaceholder",
    "when": "editorTextFocus && hasPrevTabstop && inSnippetMode"
  },
  // -------------------------------------------------------------------------
  // OpenWorkspace
  // Change symbol https://github.com/microsoft/vscode/issues/147511
  { "key": "ctrl+space s", "command": "workbench.action.openRecent" },
  // { "key": "ctrl+space s", "command": "workbench.action.quickOpenRecent" },
  // -------------------------------------------------------------------------
  // SideBar
  // SideBarから戻る
  // {
  //   "key": "ctrl+space l",
  //   "command": "workbench.action.focusLastEditorGroup",
  //   "when": "sideBarFocus"
  // },
  // SideBarに移動する
  // {
  //   "key": "ctrl+space h",
  //   "command": "workbench.action.focusSideBar",
  //   "when": "editorFocus || panelFocus"
  // },
  // 次のSideBarにFocusする
  {
    "key": "ctrl+l",
    "command": "workbench.action.nextSideBarView", // どっちかと言うとActivityBarを動かしてるように見えるのだが...
    "when": "sideBarFocus"
  },
  // 前のSideBarにFocusする
  {
    "key": "ctrl+h",
    "command": "workbench.action.previousSideBarView",
    "when": "sideBarFocus"
  },
  // SideBar maximize
  // not implemented
  // https://github.com/microsoft/vscode/issues/95139
  // {
  //   "key": "ctrl+space z",
  //   "command": "workbench.action.toggleMaximizedSideBar",
  //   "when": "sideBarFocus"
  // },
  // SideBar Close
  {
    "key": "ctrl+space x",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "sideBarFocus"
  },
  // Undo
  { "key": "u", "command": "undo", "when": "sidebarFocus" },
  // Disable default SideBar settings
  { "key": "ctrl+0", "command": "-workbench.action.focusSideBar" },
  { "key": "ctrl+b", "command": "-workbench.action.toggleSidebarVisibility" },
  // -------------------------------------------------------------------------
  // Panel
  // Panelから戻る
  // {
  //   "key": "ctrl+space k",
  //   "command": "workbench.action.focusLastEditorGroup",
  //   "when": "panelFocus"
  // },
  // Panelを出す
  {
    "key": "ctrl+space j",
    "command": "workbench.action.togglePanel",
    "when": "!activePanel && editorFocus"
  },
  // Panelに移動する
  // {
  //   "key": "ctrl+space j",
  //   "command": "workbench.action.focusPanel",
  //   "when": "activePanel"
  // },
  { "key": "ctrl+j", "command": "-workbench.action.togglePanel" },
  // 次のPanelにFocusする
  {
    "key": "ctrl+l",
    "command": "workbench.action.nextPanelView",
    "when": "panelFocus"
  },
  // 前のPanelにFocusする
  {
    "key": "ctrl+h",
    "command": "workbench.action.previousPanelView",
    "when": "panelFocus"
  },
  // Panel miximize
  {
    "key": "ctrl+space z",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "panelFocus"
  },
  // Panel Close
  {
    "key": "ctrl+space x",
    "command": "workbench.action.closePanel",
    "when": "panelFocus"
  },
  // -------------------------------------------------------------------------
  // Explorer
  {
    "key": "n f",
    "command": "explorer.newFile",
    "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "n d",
    "command": "explorer.newFolder",
    "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "d",
    "command": "moveFileToTrash",
    "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "delete",
    "command": "-moveFileToTrash",
    "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "r",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "f2",
    "command": "-renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "ctrl+x",
    "command": "-filesExplorer.cut",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "y",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "ctrl+c",
    "command": "-filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "ctrl+v",
    "command": "-filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "l",
    "command": "nextCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
  },
  {
    "key": "right",
    "command": "-nextCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
  },
  {
    "key": "h",
    "command": "previousCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
  },
  {
    "key": "left",
    "command": "-previousCompressedFolder",
    "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
  },
  // -------------------------------------------------------------------------
  // Explorer viewlet navigation
  {
    // openEditor to fileView
    "key": "ctrl+j",
    "command": "workbench.explorer.fileView.focus",
    "when": "listFocus && !inputFocus && openEditorsFocus"
  },
  {
    // fileView to openEditor
    "key": "ctrl+k",
    "command": "workbench.files.action.focusOpenEditorsView",
    "when": "listFocus && !inputFocus && filesExplorerFocus"
  },
  {
    // fileView to outline
    "key": "ctrl+j",
    "command": "outline.focus",
    "when": "listFocus && !inputFocus && filesExplorerFocus"
  },
  {
    // outline to fileView
    "key": "ctrl+k",
    "command": "workbench.explorer.fileView.focus",
    "when": "listFocus && !inputFocus && outlineFocused"
  },
  // TODO: Outline ⇔ Timeline
  // {
  //   // outline to timeline
  //   "key": "ctrl+w j",
  //   "command": "timeline.focus",
  //   "when": "listFocus && !inputFocus && outlineFocused"
  // },
  // {
  //   // timeline to outline
  //   "key": "ctrl+w k",
  //   "command": "outline.focus",
  //   // "when": "listFocus && !inputFocus && timeline.visible" //timeline.visible では単にtimelineが表示されているだけでtrueになってしまう
  //   // canMove, activeともに動作不良
  //   "when": "listFocus && !inputFocus && timeline.canMove"
  // },
  // TODO: Timeline ⇔ npm script
  // TODO: npm script ⇔ todos
  // -------------------------------------------------------------------------
  // list selection
  {
    "key": "shift+j",
    "command": "list.expandSelectionDown",
    "when": "listFocus && listSupportsMultiselect && !inputFocus"
  },
  {
    "key": "shift+down",
    "command": "-list.expandSelectionDown",
    "when": "listFocus && listSupportsMultiselect && !inputFocus"
  },
  {
    "key": "shift+k",
    "command": "list.expandSelectionUp",
    "when": "listFocus && listSupportsMultiselect && !inputFocus"
  },
  {
    "key": "shift+up",
    "command": "-list.expandSelectionUp",
    "when": "listFocus && listSupportsMultiselect && !inputFocus"
  },
  {
    "key": "space",
    "command": "list.toggleSelection",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "-list.toggleSelection",
    "when": "listFocus && !inputFocus"
  },
  // -------------------------------------------------------------------------
  // Replace C-w bindings
  {
    "key": "ctrl+space shift+x",
    "command": "workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "key": "ctrl+space x",
    "command": "workbench.action.closeActiveEditor",
    "when": "editorFocus || inGettingStarted || activeEditor == 'workbench.editor.extension'"
  },
  {
    "key": "ctrl+w x",
    "command": "workbench.action.closeActiveEditor",
    // "when": "editorFocus || inGettingStarted || activeEditor == 'workbench.editor.extension'"
    "when": "activeEditor != ''"
  },
  { "key": "ctrl+w", "command": "-workbench.action.closeActiveEditor" },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.closeWindow",
    "when": "!editorIsOpen && !multipleEditorGroups"
  },
  // -------------------------------------------------------------------------
  // SEARCH
  // Replace
  {
    "key": "space",
    "command": "search.action.replace",
    "when": "matchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+1",
    "command": "-search.action.replace",
    "when": "matchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "space",
    "command": "search.action.replaceAllInFile",
    "when": "fileMatchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+1",
    "command": "-search.action.replaceAllInFile",
    "when": "fileMatchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "space",
    "command": "search.action.replaceAllInFolder",
    "when": "folderMatchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+1",
    "command": "-search.action.replaceAllInFolder",
    "when": "folderMatchFocus && replaceActive && searchViewletVisible"
  },
  // Collapse/Expand
  {
    "key": "z r",
    "command": "search.action.collapseSearchResults",
    "when": "!inputFocus && searchViewletVisible && fileMatchOrMatchFocus"
  },
  {
    "key": "z shift+r",
    "command": "search.action.expandSearchResults",
    "when": "!inputFocus && searchViewletVisible && fileMatchOrMatchFocus"
  },
  // Focus Next/Previous Search Result
  {
    "key": "ctrl+n",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "f4",
    "command": "-search.action.focusNextSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "ctrl+shift+n",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "shift+f4",
    "command": "-search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  // Focus Next/Previous Input Box
  {
    "key": "ctrl+j",
    "command": "search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+down",
    "command": "-search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+k",
    "command": "search.focus.previousInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
  },
  {
    "key": "ctrl+up",
    "command": "-search.focus.previousInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
  },
  {
    "key": "ctrl+k",
    "command": "search.action.focusSearchFromResults",
    "when": "firstMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+up",
    "command": "-search.action.focusSearchFromResults",
    "when": "firstMatchFocus && searchViewletVisible"
  },
  // -------------------------------------------------------------------------
  // PROBLEMS
  {
    "key": "y",
    "command": "problems.action.copyMessage",
    "when": "problemFocus"
  },
  {
    "key": "/",
    "command": "problems.action.focusFilter",
    "when": "focusedView == 'workbench.panel.markers.view'"
  },
  {
    "key": "ctrl+f",
    "command": "-problems.action.focusFilter",
    "when": "focusedView == 'workbench.panel.markers.view'"
  },
  {
    "key": "ctrl+j",
    "command": "problems.action.focusProblemsFromFilter",
    "when": "problemsFilterFocus"
  },
  {
    "key": "ctrl+[",
    "command": "problems.action.focusProblemsFromFilter",
    "when": "problemsFilterFocus"
  },
  {
    "key": "ctrl+down",
    "command": "-problems.action.focusProblemsFromFilter",
    "when": "problemsFilterFocus"
  },
  // list.focusDown/Up for problems view
  {
    "key": "ctrl+j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus && focusedView == 'workbench.panel.markers.view'"
  },
  {
    "key": "ctrl+k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus && focusedView == 'workbench.panel.markers.view'"
  },
  // -------------------------------------------------------------------------
  // Source control
  // navigation list
  // source control ←→ commits
  {
    "key": "ctrl+j",
    "command": "gitlens.views.commits.focus",
    "when": "listFocus && !inputFocus && focusedView == 'workbench.scm'"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusAboveGroup",
    "when": "listFocus && !inputFocus && focusedView == 'gitlens.views.commits'"
  },
  // {
  //   "key": "ctrl+k",
  //   "command": "workbench.scm.focus",
  //   "when": "listFocus && !inputFocus && focusedView == 'gitlens.views.commits'"
  // },
  // commits ←→ file history
  {
    "key": "ctrl+j",
    "command": "gitlens.views.fileHistory.focus",
    "when": "listFocus && !inputFocus && focusedView == 'gitlens.views.commits'"
  },
  {
    "key": "ctrl+k",
    "command": "gitlens.views.commits.focus",
    "when": "listFocus && !inputFocus && focusedView == 'gitlens.views.fileHistory'"
  },
  // file history
  // branches
  // remotes
  // stashes
  // -------------------------------------------------------------------------
  // Terminal
  // Create new Terminal
  {
    "key": "ctrl+w c",
    "command": "workbench.action.terminal.new",
    "when": "terminalFocus"
  },
  { "key": "ctrl+shift+`", "command": "-workbench.action.terminal.new" },
  // Split vertical
  {
    "key": "ctrl+w shift+-",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+5",
    "command": "-workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported"
  },
  // Focus Next/Previous terminal
  {
    "key": "ctrl+alt+j",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+alt+k",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  // Kill terminal
  {
    "key": "ctrl+w x",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },
  // Focus Next/Prev Pane
  {
    "key": "ctrl+w l",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+down",
    "command": "-workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+w h",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+up",
    "command": "-workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalProcessSupported"
  },
  // Resize Pane
  {
    "key": "alt+shift+h",
    "command": "workbench.action.terminal.resizePaneLeft",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+left",
    "command": "-workbench.action.terminal.resizePaneLeft",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+shift+l",
    "command": "workbench.action.terminal.resizePaneRight",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+right",
    "command": "-workbench.action.terminal.resizePaneRight",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "shift+alt+k",
    "command": "workbench.action.terminal.resizePaneUp",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "shift+alt+j",
    "command": "workbench.action.terminal.resizePaneDown",
    "when": "terminalFocus && terminalProcessSupported"
  },
  // Navigation Mode
  // not work navigation mode
  // https://github.com/microsoft/vscode/issues/107574
  // Find Next/Previous
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "shift+f3",
    "command": "-workbench.action.terminal.findPrevious",
    "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.terminal.findNext",
    "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "f3",
    "command": "-workbench.action.terminal.findNext",
    "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
  },
  // Select Next/Previous Command Result
  {
    "key": "ctrl+w j",
    "command": "workbench.action.terminal.selectToNextCommand",
    "when": "terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+w k",
    "command": "workbench.action.terminal.selectToPreviousCommand",
    "when": "terminalFocus && terminalProcessSupported"
  },
  // -------------------------------------------------------------------------
  // Window
  { "key": "ctrl+shift+n", "command": "-workbench.action.newWindow" },
  { "key": "ctrl+space alt+n", "command": "workbench.action.newWindow" },
  { "key": "ctrl+shift+w", "command": "-workbench.action.closeWindow" },
  { "key": "ctrl+space alt+x", "command": "workbench.action.closeWindow" },
  // file
  { "key": "ctrl+o", "command": "-workbench.action.files.openFile" },
  { "key": "ctrl+space alt+f", "command": "workbench.action.files.openFile" },
  // directory
  { "key": "ctrl+space alt+d", "command": "workbench.action.files.openFolder" },
  // Markdown Preview
  // disable open markdown preview with C-S-v
  {
    "key": "ctrl+shift+v",
    "command": "-markdown.showPreview",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "ctrl+shift+v",
    "command": "-markdown.extension.togglePreview",
    "when": "!terminalFocus"
  },
  // Close Markdown Preview with C-w x
  {
    "key": "ctrl+w x",
    "command": "markdown.extension.closePreviewToSide",
    "when": "markdownPreviewFocus"
  },
  {
    "key": "ctrl+k v",
    "command": "-markdown.extension.closePreviewToSide",
    "when": "markdownPreviewFocus"
  },
  // workbench navigation
  { "key": "ctrl+space k", "command": "workbench.action.navigateUp" },
  {
    "key": "ctrl+space j",
    "command": "workbench.action.navigateDown",
    "when": "activePanel" // panelが非表示の時、workbench.action.togglePanel を実行するため
  },
  { "key": "ctrl+space h", "command": "workbench.action.navigateLeft" },
  { "key": "ctrl+space l", "command": "workbench.action.navigateRight" },
  // Toggle developer tool
  { "key": "ctrl+shift+i", "command": "workbench.action.toggleDevTools" },
  // select suggest
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  // accept suggest
  {
    "key": "ctrl+;",
    "command": "acceptSelectedSuggestion",
    "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
  },
  {
    "key": "enter",
    "command": "-acceptSelectedSuggestion",
    "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
  },
  // UI Jump settings
  // Explorer Jump
  {
    "key": "ctrl+shift+e",
    "command": "workbench.view.explorer",
    "when": "!sideBarFocus"
  },
  // Close Explorer(sideBar)
  {
    "key": "ctrl+shift+e",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "sideBarFocus"
  },
  // disable default
  {
    "key": "ctrl+shift+e",
    "command": "-workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
  },
  {
    "key": "ctrl+shift+e",
    "command": "-workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  // Search Jump
  // Close Search(sideBar)
  {
    "key": "ctrl+shift+f",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "sideBarFocus"
  },
  // Close Replace(sideBar)
  {
    "key": "ctrl+shift+h",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "sideBarFocus"
  },
  // Close Run & Debug(sideBar)
  {
    "key": "ctrl+shift+d",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "sideBarFocus"
  },
  // Close Extension(sideBar)
  {
    "key": "ctrl+shift+x",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "sideBarFocus"
  },
  // Terminal Jump
  {
    "key": "ctrl+shift+t",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  // Terminal Zoom
  {
    "key": "ctrl+shift+t",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "terminal.active && panelFocus"
  },
  // Terminal panel minimized & Close
  {
    "key": "ctrl+shift+t",
    "command": "macros.closeTerminal",
    // "command": "workbench.action.closePanel",
    "when": "terminal.active && panelFocus && panelMaximized"
  },
  {
    "key": "ctrl+h",
    "command": "-editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "ctrl+h",
    "command": "-testing.toggleTestingPeekHistory",
    "when": "testing.isPeekVisible"
  },
  // Markdown Preview Jump
  // Open markdown Preview
  {
    "key": "ctrl+shift+p",
    "command": "markdown.showPreviewToSide",
    "when": "editorFocus && editorLangId == markdown"
  },
  // Close Markdown Preview
  {
    "key": "ctrl+shift+p",
    "command": "markdown.extension.closePreviewToSide",
    "when": "markdownPreviewFocus"
  },
  // Down cursor in Markdown Preview
  // {
  //   "key": "j",
  //   "command": "scrollPageDown",
  //   // "command": "scrollLineDown",
  //   // "command": "workbench.action.interactivePlayground.arrowDown",
  //   // "command": "list.focusDown",
  //   // "command": "extension.vim_down",
  //   // "command": "cursorDown",
  //   "when": "markdownPreviewFocus"
  // }
  // FindReplace
  {
    "key": "ctrl+alt+n",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "shift+enter",
    "command": "-editor.action.previousMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "ctrl+alt+n",
    "command": "-code-runner.run"
  },
  {
    "key": "ctrl+n",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "enter",
    "command": "-editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "tab",
    "command": "-acceptSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  }
]
